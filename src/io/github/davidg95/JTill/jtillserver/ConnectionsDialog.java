/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.davidg95.JTill.jtillserver;

import io.github.davidg95.JTill.jtill.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.JDialog;

/**
 * Dialog which shows all current connected clients.
 *
 * @author David
 */
public class ConnectionsDialog extends javax.swing.JDialog {

    private static JDialog dialog;

    private final DataConnect dc;
    private MyListModel model;

    /**
     * Creates new form ConnectionsDialog
     *
     * @param parent the parent component.
     * @param dc the data connection.
     */
    public ConnectionsDialog(Window parent, DataConnect dc) {
        super(parent);
        this.dc = dc;
        initComponents();
        this.setLocationRelativeTo(parent);
        this.setModal(true);
        setList();
    }

    /**
     * Method to show the connections dialog.
     *
     * @param parent the parent window.
     * @param dc the data connection.
     */
    public static void showConnectionsDialog(Component parent, DataConnect dc) {
        Window window = null;
        if (parent instanceof Dialog || parent instanceof Frame) {
            window = (Window) parent;
        }
        dialog = new ConnectionsDialog(window, dc);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialog.setVisible(true);
    }

    private class MyListModel extends AbstractListModel {

        private final List<Till> tills;

        public MyListModel(List<Till> tills) {
            this.tills = tills;
        }

        @Override
        public int getSize() {
            return tills.size();
        }

        @Override
        public Till getElementAt(int index) {
            return tills.get(index);
        }

    }

    /**
     * Method to display the contents of the list in the dialog.
     */
    private void setList() {
        try {
            List<Till> tills = dc.getAllTills();
            for (Till t : dc.getConnectedTills()) {
                for (Till ti : tills) {
                    if (ti.equals(t)) {
                        ti.setConnected(true);
                    }
                }
            }
            model = new MyListModel(tills);
            lstConnections.setModel(model);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(ConnectionsDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstConnections = new javax.swing.JList<>();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Connections");
        setResizable(false);

        lstConnections.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstConnections.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstConnectionsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstConnections);

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void lstConnectionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstConnectionsMouseClicked
        if (evt.getClickCount() == 2) {
            try {
                Till t = dc.getAllTills().get(lstConnections.getSelectedIndex());
                try {
                    List<Sale> sales = dc.getUncachedTillSales(t.getId());
                    BigDecimal unCashed = BigDecimal.ZERO;
                    for (Sale s : sales) {
                        unCashed = unCashed.add(s.getTotal());
                    }
                    t.setUncashedTakings(unCashed);
                } catch (JTillException ex) {
                    Logger.getLogger(ConnectionsDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
                TillDialog.showDialog(this, t);
            } catch (IOException | SQLException ex) {
                Logger.getLogger(ConnectionsDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lstConnectionsMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lstConnections;
    // End of variables declaration//GEN-END:variables
}
